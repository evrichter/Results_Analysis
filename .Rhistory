# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("/Users/chr/Nextcloud/Exp4/Norming/plausibility/")
setwd("/downloads")
setwd("/Downloads")
setwd("/home/Downloads")
# Demog
demog <- fread("demog.txt")
colnames(demog) <- c("time", "ID", "three", "four", "five", "six", "question", "answer")
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("/home/Downloads")
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("~/home/Downloads")
# Demog
demog <- fread("demog.txt")
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r")
debugSource("~/Downloads/plaus_changed.r")
debugSource("~/Downloads/plaus_changed.r")
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r", echo=TRUE)
debugSource("~/Downloads/plaus_changed.r")
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
library(data.table)
# functions
se <- function(
x,
na.rm = FALSE
){
if (na.rm == TRUE) {
sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
} else {
sd(x)/sqrt(length(x))
}
}
assign_lists <- function(dt) {
l1 <- dt[(Item == 1 & Condition == "A"),]$ID
l2 <- dt[(Item == 1 & Condition == "B"),]$ID
l3 <- dt[(Item == 1 & Condition == "C"),]$ID
l4 <- dt[(Item == 1 & Condition == "Ad"),]$ID
l5 <- dt[(Item == 1 & Condition == "Bd"),]$ID
l6 <- dt[(Item == 1 & Condition == "Cd"),]$ID
print(nrow(dt))
dt$list <- rep(0, nrow(dt))
dt[ID %in% l1,"list"] <- 1
dt[ID %in% l2,"list"] <- 2
dt[ID %in% l3,"list"] <- 3
dt[ID %in% l4,"list"] <- 4
dt[ID %in% l5,"list"] <- 5
dt[ID %in% l6,"list"] <- 6
dt
}
setwd("~/Downloads/")
# Demog
demog <- fread("demog.txt")
# colnames(demog) <- c("time", "ID", "three", "four", "five", "six", "question", "answer")
colnames(demog) <- c("time", "ID", "three", "four", "five", "six", "seven", "question", "answer")
demog[,c("three", "four", "five", "six")] <- NULL
demog <- dcast(demog, time + ID ~ question, value.var="answer")
demog <- demog[time > 1634211007,]
debugSource("~/Downloads/plaus_changed.r")
### LMER ###
# load lme4 package
library(lme4)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Results/")
GP6 <- read.csv("GP6SPR_processed.csv")
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
Precritical$scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
Precritical$scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
Precritical$inverted_scaled_Plaus_Precritical <- (scaled_Plaus_Precritical) * (-1)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
Precritical$scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
Precritical$scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
Precritical$inverted_scaled_Plaus_Precritical <- (Precritical$scaled_Plaus_Precritical) * (-1)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
##### CRITICAL #####
# Critical region
Critical <- subset(GP6, Region == "Critical")
# standardise predictors
scaled_Plaus_Critical <- scale(Critical$SPR_Plaus_Rating)
scaled_Surprisaldist_Critical <- scale(Critical$Surprisal_distractor)
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(logRT_Precritical ~ Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Subject) + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Item), data = Precritical)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
summary_Precritical
# add above columns to dataframe precritical (except logRT_Precritical)
# take subset of condition A and use it as data for prediciton
Precrit_A <- subset(Precritical, Condition == "A")
# predict reading times based on conditions
predictions_precritical_A <- predict(model_Precritical, newdata = Precrit_A,  type = "response")
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(Precritical$logRT_Precritical ~ Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Subject) + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Item), data = Precritical)
# invert predictor plausibility
Precritical$inverted_scaled_Plaus_Precritical <- (Precritical$scaled_Plaus_Precritical) * (-1)
# log transform reading times
Precritical$logRT_Precritical <- log(Precritical$ReadingTime)
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(Precritical$logRT_Precritical ~ Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Subject) + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Item), data = Precritical)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
summary_Precritical
# predict reading times based on conditions
predictions_precritical_A <- predict(model_Precritical, newdata = Precrit_A,  type = "response")
predictions_precritical_A
# add above columns to dataframe precritical (except logRT_Precritical)
# take subset of condition A and use it as data for prediciton
Precrit_A <- subset(Precritical, Condition == "A")
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(Precritical$logRT_Precritical ~ Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Subject) + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Item), data = Precritical)
# Define and run the linear mixed-effects regression model for the critical region
model_Critical <- lmer(logRT_Critical ~ inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Subject) + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Item), data = Critical)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
summary_Precritical
# predict reading times based on conditions
predictions_precritical_A <- predict(model_Precritical, newdata = Precrit_A,  type = "response")
predictions_precritical_A
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
Precritical$scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
Precritical$scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
Precritical$inverted_scaled_Plaus_Precritical <- (Precritical$scaled_Plaus_Precritical) * (-1)
# log transform reading times
Precritical$logRT_Precritical <- log(Precritical$ReadingTime)
# add above columns to dataframe precritical (except logRT_Precritical)
# take subset of condition A and use it as data for prediciton
Precrit_A <- subset(Precritical, Condition == "A")
View(Precrit_A)
### LMER ###
# load lme4 package
library(lme4)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Results/")
GP6 <- read.csv("GP6SPR_processed.csv")
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
Precritical$scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
Precritical$scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
Precritical$inverted_scaled_Plaus_Precritical <- (Precritical$scaled_Plaus_Precritical) * (-1)
# log transform reading times
Precritical$logRT_Precritical <- log(Precritical$ReadingTime)
# add above columns to dataframe precritical (except logRT_Precritical)
# take subset of condition A and use it as data for prediciton
Precrit_A <- subset(Precritical, Condition == "A")
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(Precritical$logRT_Precritical ~ Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Subject) + (1 + Precritical$inverted_scaled_Plaus_Precritical + Precritical$scaled_Surprisaldist_Precritical | Item), data = Precritical)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
# predict reading times based on conditions
predictions_precritical_A <- predict(model_Precritical, newdata = Precrit_A,  type = "response")
predictions_precritical_A
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Precritical <- (scaled_Plaus_Precritical) * (-1)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(logRT_Precritical ~ inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Subject) + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Item), data = Precritical)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
summary_Precritical
# predict reading times based on conditions
predictions_precritical_A <- predict(model_Precritical,  type = "response")
predictions_precritical_A
mean(predictions_precritical_A)
Precritical$scaled_Plaus_Precritical
Precritical$scaled_Surprisaldist_Precritical
Precritical$inverted_scaled_Plaus_Precritical
View(Precritical)
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Precritical <- (scaled_Plaus_Precritical) * (-1)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
Precritical$scaled_Plaus_Precritical
Precritical$scaled_Surprisaldist_Precritical
Precritical$inverted_scaled_Plaus_Precritical
View(Precritical)
# add above columns to dataframe precritical (except logRT_Precritical)
new_df <- data.frame(item, condition, subject, scaled_Plaus_Precritical, scaled_Surprisaldist_Precritical, inverted_scaled_Plaus_Precritical, logRT_Precritical)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
item <- Precritical$Item
subject <- Precritical$Subject
condition <- Precritical$Condition
# add above columns to dataframe precritical (except logRT_Precritical)
new_df <- data.frame(item, condition, subject, scaled_Plaus_Precritical, scaled_Surprisaldist_Precritical, inverted_scaled_Plaus_Precritical, logRT_Precritical)
View(new_df)
# take subset of condition A and use it as data for prediciton
Precritical_A <- subset(new_df, Condition == "A")
# take subset of condition A and use it as data for prediciton
Precritical_A <- subset(new_df, condition == "A")
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(logRT_Precritical ~ inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Subject) + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Item), data = new_df)
# Define and run the linear mixed-effects regression model for the critical region
model_Critical <- lmer(logRT_Critical ~ inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Subject) + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Item), data = Critical)
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Precritical <- (scaled_Plaus_Precritical) * (-1)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
item <- Precritical$Item
subject <- Precritical$Subject
condition <- Precritical$Condition
# add above columns to dataframe precritical (except logRT_Precritical)
new_df <- data.frame(item, condition, subject, scaled_Plaus_Precritical, scaled_Surprisaldist_Precritical, inverted_scaled_Plaus_Precritical, logRT_Precritical)
# take subset of condition A and use it as data for prediciton
Precritical_A <- subset(new_df, condition == "A")
##### CRITICAL #####
# Critical region
Critical <- subset(GP6, Region == "Critical")
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(logRT_Precritical ~ inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Subject) + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Item), data = new_df)
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(logRT_Precritical ~ inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | subject) + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | item), data = new_df)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
summary_Precritical
predictions_precritical_A <- predict(new_df, newdata = Precritical_A,  type = "response")
predictions_precritical_A
predictions_precritical_A <- predict(new_df, newdata = Precritical_A,  type = "response")
### LMER ###
# load lme4 package
library(lme4)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Results/")
GP6 <- read.csv("GP6SPR_processed.csv")
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Precritical <- (scaled_Plaus_Precritical) * (-1)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
# add above columns to dataframe precritical (except logRT_Precritical)
# take subset of condition A and use it as data for prediciton
##### CRITICAL #####
# Critical region
Critical <- subset(GP6, Region == "Critical")
# standardise predictors
scaled_Plaus_Critical <- scale(Critical$SPR_Plaus_Rating)
scaled_Surprisaldist_Critical <- scale(Critical$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Critical <- (scaled_Plaus_Critical) * (-1)
# log transform reading times
logRT_Critical <- log(Critical$ReadingTime)
##### SPILLOVER #####
# Spillover region
Spillover <- subset(GP6, Region == "Spillover")
# standardise predictors
scaled_Plaus_Spillover <- scale(Spillover$SPR_Plaus_Rating)
scaled_Surprisaldist_Spillover <- scale(Spillover$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Spillover <- (scaled_Plaus_Spillover) * (-1)
# log transform reading times
logRT_Spillover <- log(Spillover$ReadingTime)
##### POST-SPILLOVER #####
# Post-spillover region & condition A
Postspillover <- subset(GP6, Region == "Post-spillover")
# standardise predictors
scaled_Plaus_Postspillover <- scale(Postspillover$SPR_Plaus_Rating)
scaled_Surprisaldist_Postspillover <- scale(Postspillover$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Postspillover <- (scaled_Plaus_Postspillover) * (-1)
# log transform reading times
logRT_Postspillover <- log(Postspillover$ReadingTime)
#hist(A_Critical$SPR_Plaus_Rating, breaks = 15)
#hist(scaled_Plaus_A_Crit, breaks = 15)
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(logRT_Precritical ~ inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Subject) + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Item), data = Precritical)
# Define and run the linear mixed-effects regression model for the critical region
model_Critical <- lmer(logRT_Critical ~ inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Subject) + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Item), data = Critical)
# Define and run the linear mixed-effects regression model for the spillover region
model_Spillover <- lmer(logRT_Spillover ~ inverted_scaled_Plaus_Spillover + scaled_Surprisaldist_Spillover + (1 + inverted_scaled_Plaus_Spillover + scaled_Surprisaldist_Spillover | Subject) + (1 + inverted_scaled_Plaus_Spillover + scaled_Surprisaldist_Spillover | Item), data = Spillover)
# Define and run the linear mixed-effects regression model for the postspillover region
model_Postspillover <- lmer(logRT_Postspillover ~ inverted_scaled_Plaus_Postspillover + scaled_Surprisaldist_Postspillover + (1 + inverted_scaled_Plaus_Postspillover + scaled_Surprisaldist_Postspillover | Subject) + (1 + inverted_scaled_Plaus_Postspillover + scaled_Surprisaldist_Postspillover | Item), data = Postspillover)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
summary_Precritical
summary_Critical <- summary(model_Critical)
summary_Critical
summary_Spillover <- summary(model_Spillover)
summary_Spillover
summary_Postspillover <- summary(model_Postspillover)
summary_Postspillover
# predict reading times based on conditions
new_data <- data.frame()
predictions_precritical_A <- predict(model_Precritical, newdata = Precritical_A,  type = "response")
# Define and run the linear mixed-effects regression model for the precritical region
model_Precritical <- lmer(logRT_Precritical ~ inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Subject) + (1 + inverted_scaled_Plaus_Precritical + scaled_Surprisaldist_Precritical | Item), data = Precritical)
# Define and run the linear mixed-effects regression model for the critical region
model_Critical <- lmer(logRT_Critical ~ inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Subject) + (1 + inverted_scaled_Plaus_Critical + scaled_Surprisaldist_Critical | Item), data = Critical)
# Print the summary of the model
summary_Precritical <- summary(model_Precritical)
summary_Precritical
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
inverted_scaled_Plaus_Precritical <- (scaled_Plaus_Precritical) * (-1)
# log transform reading times
logRT_Precritical <- log(Precritical$ReadingTime)
### LMER ###
# load lme4 package
library(lme4)
library(dplyr)
setwd("~/Downloads/Master_Thesis/3_SPR_Study/Results/")
GP6 <- read.csv("GP6SPR_processed.csv")
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
View(Precritical)
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
Precritical$scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
GP6 <- read.csv("GP6SPR_processed.csv")
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
Precritical$scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
View(Precritical)
##### PRE-CRITICAL #####
# Precritical region
Precritical <- subset(GP6, Region == "Pre-critical")
# standardise predictors
Precritical$scaled_Plaus_Precritical <- scale(Precritical$SPR_Plaus_Rating)
Precritical$scaled_Surprisaldist_Precritical <- scale(Precritical$Surprisal_distractor)
# invert predictor plausibility
Precritical$inverted_scaled_Plaus_Precritical <- (scaled_Plaus_Precritical) * (-1)
# log transform reading times
Precritical$logRT_Precritical <- log(Precritical$ReadingTime)
##### CRITICAL #####
# Critical region
Critical <- subset(GP6, Region == "Critical")
View(Precritical)
